// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Rpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rpc_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rpc_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rpc_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rpc_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  Rpc_descriptor_ = file->message_type(0);
  static const int Rpc_offsets_[1] = {
  };
  Rpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rpc_descriptor_,
      Rpc::default_instance_,
      Rpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc, _is_default_instance_));
  Rpc_Request_descriptor_ = Rpc_descriptor_->nested_type(0);
  static const int Rpc_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Request, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Request, data_),
  };
  Rpc_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rpc_Request_descriptor_,
      Rpc_Request::default_instance_,
      Rpc_Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rpc_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Request, _is_default_instance_));
  Rpc_Response_descriptor_ = Rpc_descriptor_->nested_type(1);
  static const int Rpc_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Response, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Response, data_),
  };
  Rpc_Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rpc_Response_descriptor_,
      Rpc_Response::default_instance_,
      Rpc_Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rpc_Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rpc_Response, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rpc_descriptor_, &Rpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rpc_Request_descriptor_, &Rpc_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rpc_Response_descriptor_, &Rpc_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete Rpc::default_instance_;
  delete Rpc_reflection_;
  delete Rpc_Request::default_instance_;
  delete Rpc_Request_reflection_;
  delete Rpc_Response::default_instance_;
  delete Rpc_Response_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\"^\n\003Rpc\0321\n\007Request\022\014\n\004name\030\001 "
    "\001(\t\022\n\n\002id\030\002 \001(\007\022\014\n\004data\030\003 \001(\014\032$\n\010Respons"
    "e\022\n\n\002id\030\002 \001(\007\022\014\n\004data\030\003 \001(\014b\006proto3", 115);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  Rpc::default_instance_ = new Rpc();
  Rpc_Request::default_instance_ = new Rpc_Request();
  Rpc_Response::default_instance_ = new Rpc_Response();
  Rpc::default_instance_->InitAsDefaultInstance();
  Rpc_Request::default_instance_->InitAsDefaultInstance();
  Rpc_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Rpc_Request::kNameFieldNumber;
const int Rpc_Request::kIdFieldNumber;
const int Rpc_Request::kDataFieldNumber;
#endif  // !_MSC_VER

Rpc_Request::Rpc_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.Request)
}

void Rpc_Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rpc_Request::Rpc_Request(const Rpc_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Rpc.Request)
}

void Rpc_Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rpc_Request::~Rpc_Request() {
  // @@protoc_insertion_point(destructor:Rpc.Request)
  SharedDtor();
}

void Rpc_Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Rpc_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rpc_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rpc_Request_descriptor_;
}

const Rpc_Request& Rpc_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Rpc_Request* Rpc_Request::default_instance_ = NULL;

Rpc_Request* Rpc_Request::New(::google::protobuf::Arena* arena) const {
  Rpc_Request* n = new Rpc_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rpc_Request::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Rpc_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.Request.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_id;
        break;
      }

      // optional fixed32 id = 2;
      case 2: {
        if (tag == 21) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.Request)
  return false;
#undef DO_
}

void Rpc_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.Request)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Rpc.Request)
}

::google::protobuf::uint8* Rpc_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.Request)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Rpc.Request)
  return target;
}

int Rpc_Request::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional fixed32 id = 2;
  if (this->id() != 0) {
    total_size += 1 + 4;
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rpc_Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rpc_Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rpc_Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rpc_Request::MergeFrom(const Rpc_Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Rpc_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc_Request::CopyFrom(const Rpc_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc_Request::IsInitialized() const {

  return true;
}

void Rpc_Request::Swap(Rpc_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc_Request::InternalSwap(Rpc_Request* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rpc_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rpc_Request_descriptor_;
  metadata.reflection = Rpc_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Rpc_Response::kIdFieldNumber;
const int Rpc_Response::kDataFieldNumber;
#endif  // !_MSC_VER

Rpc_Response::Rpc_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.Response)
}

void Rpc_Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rpc_Response::Rpc_Response(const Rpc_Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Rpc.Response)
}

void Rpc_Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rpc_Response::~Rpc_Response() {
  // @@protoc_insertion_point(destructor:Rpc.Response)
  SharedDtor();
}

void Rpc_Response::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Rpc_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rpc_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rpc_Response_descriptor_;
}

const Rpc_Response& Rpc_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Rpc_Response* Rpc_Response::default_instance_ = NULL;

Rpc_Response* Rpc_Response::New(::google::protobuf::Arena* arena) const {
  Rpc_Response* n = new Rpc_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rpc_Response::Clear() {
  id_ = 0u;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Rpc_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 2;
      case 2: {
        if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.Response)
  return false;
#undef DO_
}

void Rpc_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.Response)
  // optional fixed32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Rpc.Response)
}

::google::protobuf::uint8* Rpc_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.Response)
  // optional fixed32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Rpc.Response)
  return target;
}

int Rpc_Response::ByteSize() const {
  int total_size = 0;

  // optional fixed32 id = 2;
  if (this->id() != 0) {
    total_size += 1 + 4;
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rpc_Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rpc_Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rpc_Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rpc_Response::MergeFrom(const Rpc_Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Rpc_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc_Response::CopyFrom(const Rpc_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc_Response::IsInitialized() const {

  return true;
}

void Rpc_Response::Swap(Rpc_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc_Response::InternalSwap(Rpc_Response* other) {
  std::swap(id_, other->id_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rpc_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rpc_Response_descriptor_;
  metadata.reflection = Rpc_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Rpc::Rpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc)
}

void Rpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rpc::Rpc(const Rpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Rpc)
}

void Rpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Rpc::~Rpc() {
  // @@protoc_insertion_point(destructor:Rpc)
  SharedDtor();
}

void Rpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rpc_descriptor_;
}

const Rpc& Rpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Rpc* Rpc::default_instance_ = NULL;

Rpc* Rpc::New(::google::protobuf::Arena* arena) const {
  Rpc* n = new Rpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rpc::Clear() {
}

bool Rpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc)
  return false;
#undef DO_
}

void Rpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc)
  // @@protoc_insertion_point(serialize_end:Rpc)
}

::google::protobuf::uint8* Rpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc)
  // @@protoc_insertion_point(serialize_to_array_end:Rpc)
  return target;
}

int Rpc::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rpc::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rpc>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rpc::MergeFrom(const Rpc& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Rpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpc::CopyFrom(const Rpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpc::IsInitialized() const {

  return true;
}

void Rpc::Swap(Rpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rpc::InternalSwap(Rpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rpc_descriptor_;
  metadata.reflection = Rpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rpc_Request

// optional string name = 1;
void Rpc_Request::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Rpc_Request::name() const {
  // @@protoc_insertion_point(field_get:Rpc.Request.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rpc_Request::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Rpc.Request.name)
}
 void Rpc_Request::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Rpc.Request.name)
}
 void Rpc_Request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Rpc.Request.name)
}
 ::std::string* Rpc_Request::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Rpc.Request.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Rpc_Request::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rpc_Request::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Rpc.Request.name)
}

// optional fixed32 id = 2;
void Rpc_Request::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Rpc_Request::id() const {
  // @@protoc_insertion_point(field_get:Rpc.Request.id)
  return id_;
}
 void Rpc_Request::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Rpc.Request.id)
}

// optional bytes data = 3;
void Rpc_Request::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Rpc_Request::data() const {
  // @@protoc_insertion_point(field_get:Rpc.Request.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rpc_Request::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Rpc.Request.data)
}
 void Rpc_Request::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Rpc.Request.data)
}
 void Rpc_Request::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Rpc.Request.data)
}
 ::std::string* Rpc_Request::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Rpc.Request.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Rpc_Request::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rpc_Request::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Rpc.Request.data)
}

// -------------------------------------------------------------------

// Rpc_Response

// optional fixed32 id = 2;
void Rpc_Response::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Rpc_Response::id() const {
  // @@protoc_insertion_point(field_get:Rpc.Response.id)
  return id_;
}
 void Rpc_Response::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Rpc.Response.id)
}

// optional bytes data = 3;
void Rpc_Response::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Rpc_Response::data() const {
  // @@protoc_insertion_point(field_get:Rpc.Response.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rpc_Response::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Rpc.Response.data)
}
 void Rpc_Response::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Rpc.Response.data)
}
 void Rpc_Response::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Rpc.Response.data)
}
 ::std::string* Rpc_Response::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Rpc.Response.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Rpc_Response::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Rpc_Response::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Rpc.Response.data)
}

// -------------------------------------------------------------------

// Rpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
